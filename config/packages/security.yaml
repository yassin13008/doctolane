security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_professionnals_user:
            entity:
                class: App\Entity\Professionnals
                property: email
        app_patients_user:
            entity:
                class: App\Entity\Patients
                property: email
        chain_provider:
            chain:
                providers: ['app_professionnals_user', 'app_patients_user']
        # used to reload user from session & other features (e.g. switch_user)
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: chain_provider
            logout:
                path: app_logout
            custom_authenticator: App\Security\UserAuthenticator
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/, roles: ROLE_USER }
        - { path: ^/profilePatient, roles: ROLE_USER }
        - { path: ^/app_professionnal_list, roles: ROLE_USER }
        - { path: ^/professionnal/appointment/new/, roles: [ROLE_DOCTOR] }
        - { path: ^/professionnal/appointment/add/, roles: [ROLE_USER] }
        - { path: ^/professionnal/appointment/, roles: ROLE_DOCTOR }
        - { path: ^/professionnal/appointment/show/id, roles: ROLE_DOCTOR }
        - { path: ^/professionnal/appointment/id/edit, roles: ROLE_DOCTOR }
        - { path: ^/professionnal/appointment/id/, roles: ROLE_DOCTOR }
        - { path: ^/profileDoctor, roles: ROLE_DOCTOR }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
